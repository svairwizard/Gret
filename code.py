import os
import re
import shutil

def should_skip_path(path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è 'microsoft' –≤ –ø—É—Ç–∏"""
    path_parts = path.lower().split(os.sep)
    return any('microsoft' in part for part in path_parts)

def delete_unnecessary_folders(root_dir):
    folders_to_delete = ['.vs', 'build']
    for root, dirs, _ in os.walk(root_dir):
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ dirs, —á—Ç–æ–±—ã os.walk –∏—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª
        dirs[:] = [d for d in dirs if not should_skip_path(os.path.join(root, d))]
        
        for dirname in dirs:
            if dirname.lower() in folders_to_delete:
                dirpath = os.path.join(root, dirname)
                try:
                    if not should_skip_path(dirpath):
                        shutil.rmtree(dirpath)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dirpath}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {dirpath}: {e}")

def replace_in_filename_and_content(root_dir, old_word, new_word):
    if should_skip_path(root_dir):
        print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É (—Å–æ–¥–µ—Ä–∂–∏—Ç Microsoft): {root_dir}")
        return

    root_dir_name = os.path.basename(root_dir)
    if old_word.lower() in root_dir_name.lower():
        new_root_dir = root_dir.replace(old_word, new_word)
        os.rename(root_dir, new_root_dir)
        root_dir = new_root_dir

    for root, dirs, files in os.walk(root_dir, topdown=False):
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        dirs[:] = [d for d in dirs if not should_skip_path(os.path.join(root, d))]
        
        for filename in files:
            filepath = os.path.join(root, filename)
            
            if should_skip_path(filepath):
                print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª (—Å–æ–¥–µ—Ä–∂–∏—Ç Microsoft): {filepath}")
                continue
                
            new_filename = re.sub(
                re.compile(re.escape(old_word), re.IGNORECASE), 
                new_word, 
                filename
            )
            if new_filename != filename:
                new_filepath = os.path.join(root, new_filename)
                os.rename(filepath, new_filepath)
                filepath = new_filepath
            
            try:
                with open(filepath, 'rb') as file:
                    content = file.read().decode('utf-8', errors='ignore')
                
                new_content = re.sub(
                    re.compile(re.escape(old_word), re.IGNORECASE), 
                    new_word, 
                    content
                )
                
                if new_content != content:
                    with open(filepath, 'wb') as file:
                        file.write(new_content.encode('utf-8'))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filepath}: {e}")
        
        for dirname in dirs:
            dirpath = os.path.join(root, dirname)
            
            if should_skip_path(dirpath):
                continue
                
            new_dirname = re.sub(
                re.compile(re.escape(old_word), re.IGNORECASE), 
                new_word, 
                dirname
            )
            if new_dirname != dirname:
                new_dirpath = os.path.join(root, new_dirname)
                os.rename(dirpath, new_dirpath)

def main():
    print("=== Gret v_1.2 dev. by svairwizard ===")
    folder_path = input("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip('"').strip()
    old_word = input("–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –∑–∞–º–µ–Ω—è–µ–º?: ").strip()
    new_word = input("–ù–∞ –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –º–µ–Ω—è–µ–º?: ").strip()

    if not os.path.exists(folder_path):
        print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    print("\n–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞–ø–æ–∫ (.vs, build)...")
    delete_unnecessary_folders(folder_path)
    
    print("\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ–Ω—É...")
    replace_in_filename_and_content(folder_path, old_word, new_word)
    print("\n–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

if __name__ == "__main__":
    main()
